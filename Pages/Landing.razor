@page "/"
@using EventRegistrationApp.Models
@using EventRegistrationApp.Services

<div class="container mt-5">
    <h1 class="display-4">Welcome to AAT Event Registration</h1>
    <p class="lead">View and register for upcoming Aat events.</p>

    <h2 class="my-4">Upcoming Events</h2>

    <div class="row">
        @if (IsLoading)
        {
            <div class="col-12 text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (events != null && events.Any())
        {
            @foreach (var upcomingEvent in events)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <img src="/images/aat.jpg" class="card-img-top" alt="Event Image">
                        <div class="card-body">
                            <h5 class="card-title">@upcomingEvent.Name</h5>
                            <p class="card-text">Date: @upcomingEvent.Date.ToShortDateString()</p>
                            <p class="card-text">Available Seats: @upcomingEvent.TotalSeats</p>
                            <a href="/register/@upcomingEvent.Id" class="btn btn-primary">Register</a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <p class="alert alert-info">No upcoming events found.</p>
            </div>
        }
    </div>
</div>

@code {
    private List<Event>? events;
    private bool IsLoading = true;

    [Inject]
    private EventService EventServiceInstance { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            events = await EventServiceInstance.GetUpcomingEventsAsync();
        }
        catch (Exception ex)
        {
            // Handle the exception (e.g., show an error message or log it)
            Console.WriteLine(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}